#########################################################
# Configuraciones comunes
#########################################################

# Define una configuración base común para los servicios de usuarios
x-usuarios-base: &usuarios-base
  image: services/usuarios
  networks:
    - traefik-public
    - default
  env_file:
    - .env
  build:
    context: ./services/usuarios
  volumes:
    - usuarios-db:/app/data

x-ajedrez-base: &ajedrez-base
  image: services/ajedrez
  networks:
    - traefik-public
    - default
  env_file:
    - .env
  build:
    context: ./services/ajedrez
    args:
      - CARGO_BUILD_JOBS=4
      - CARGO_INCREMENTAL=1
  volumes:
    - cargo-cache:/usr/local/cargo/registry
    - cargo-target:/app/target
    - ajedrez-db:/app/data
  command:
    - RUST_LOG=info
    - /app/ajedrez-server

x-memorama-base: &memorama-base
  image: services/memorama
  networks:
    - traefik-public
    - default
  env_file:
    - .env
  build:
    context: ./services/memorama
  volumes:
    - memorama-db:/app/data

services:
  #########################################################
  # Microservicio de frontend
  #########################################################
  frontend:
    image: services/frontend
    networks:
      - traefik-public
      - default
    env_file:
      - .env
    build:
      context: ./services/frontend
      args:
        - VITE_API_URL=http://${DOMAIN}/
        - NODE_ENV=development
    restart: always
    develop:
      watch:
        - path: ./services/frontend/src
          action: sync
          target: /app/src
        - path: ./services/frontend/public
          action: sync
          target: /app/public
        - path: ./services/frontend/package.json
          action: rebuild
    ports:
      - "${FRONTEND_SERVICE_PORT}:80"
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.frontend.entrypoints=http
      - traefik.http.services.frontend.loadbalancer.server.port=80
      - traefik.http.routers.frontend.rule=PathPrefix(`/`)

  #########################################################
  # Microservicio de usuarios. Autenticación.
  #########################################################
  usuarios:
    <<: *usuarios-base
    restart: always
    ports:
      - "${USUARIOS_PORT}:${USUARIOS_PORT}"
    develop:
      watch:
        - path: ./services/usuarios
          action: sync
          target: /app
          ignore:
            - ./services/usuarios/.venv
        - path: ./services/usuarios/pyproject.toml
          action: rebuild
    command:
      - fastapi
      - run
      - --port
      - ${USUARIOS_PORT}
      - --reload
      - "app/main.py"
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.usuarios.entrypoints=http
      - traefik.http.services.usuarios.loadbalancer.server.port=${USUARIOS_PORT}
      - traefik.http.routers.usuarios.rule=PathPrefix(`/api/usuarios`)

  # Usuarios CLI. Una herramienta para interactuar con el microservicio de usuarios.
  # Ejecutando desde el host:
  # docker compose run --rm usuarios-cli
  usuarios-cli:
    <<: *usuarios-base
    entrypoint: usuarios_cli
    command: []

  #########################################################
  # Ajedrez. Un microservicio para jugar ajedrez.
  #########################################################

  ajedrez:
    <<: *ajedrez-base
    restart: always
    ports:
      - "${AJEDREZ_PORT}:8000"
    develop:
      watch:
        - path: ./services/ajedrez
          action: sync
          target: /app
          ignore:
            - ./services/ajedrez/.venv
            - ./services/ajedrez/tests
        - path: ./services/ajedrez/pyproject.toml
          action: rebuild

    command:
      - /app/ajedrez-server
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.ajedrez.entrypoints=http
      - traefik.http.services.ajedrez.loadbalancer.server.port=7777
      - traefik.http.routers.ajedrez.rule=PathPrefix(`/api/ajedrez`)

  # Ajedrez CLI. Una herramienta para interactuar con el microservicio de ajedrez.
  # Ejecutando desde el host:
  # docker compose run --rm ajedrez-cli
  ajedrez-cli:
    <<: *ajedrez-base
    entrypoint: /app/ajedrez-cli
    command: []

  memorama:
    <<: *memorama-base
    restart: always
    ports:
      - "${MEMORAMA_PORT}:${MEMORAMA_PORT}"
    develop:
      watch:
        - path: ./services/memorama
          action: sync
          target: /app
          ignore:
            - ./services/memorama/.venv
        - path: ./services/memorama/pyproject.toml
          action: rebuild
    command:
      - fastapi
      - run
      - --port
      - ${MEMORAMA_PORT}
      - --reload
      - "app/main.py"
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.memorama.entrypoints=http
      - traefik.http.services.memorama.loadbalancer.server.port=${MEMORAMA_PORT}
      - traefik.http.routers.memorama.rule=PathPrefix(`/api/memorama`)

  memorama-frontend:
    image: services/memorama-frontend
    networks:
      - traefik-public
      - default
    env_file:
      - .env
    build:
      context: ./services/memorama/frontend
      args:
        - VITE_API_URL=http://${DOMAIN}/
        - NODE_ENV=development
    restart: always
    develop:
      watch:
        - path: ./services/memorama/frontend/src
          action: sync
          target: /app/src
        - path: ./services/memorama/frontend/public
          action: sync
          target: /app/public
        - path: ./services/memorama/frontend/package.json
          action: rebuild
    ports:
      - "${MEMORAMA_FRONTEND_PORT}:80"
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.routers.memorama-frontend.entrypoints=http
      - traefik.http.services.memorama-frontend.loadbalancer.server.port=80
      - traefik.http.routers.memorama-frontend.rule=PathPrefix(`/memorama`)

  # Memorama CLI. Una herramienta para interactuar con el microservicio de memorama.
  # Ejecutando desde el host:
  # docker compose run --rm memorama-cli
  memorama-cli:
    <<: *memorama-base
    entrypoint: memorama_cli
    command: []

  proxy:
    image: traefik:3.0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "${TRAEFIK_PORT}:8080"
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Create an entrypoint "http" listening on port 80
      # - --entrypoints.http.address=:80
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable debug logging for local development
      - --log.level=DEBUG
      # Enable the Dashboard and API in insecure mode for local development
      - --api
      - --api.insecure=true
      - --api.debug
      # - --tracing
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      - traefik.constraint-label=traefik-public
    networks:
      - traefik-public
      - default

volumes:
  cargo-cache:
  cargo-target:
  usuarios-db:
  ajedrez-db:
  memorama-db:

networks:
  traefik-public:
    name: traefik-public
    # For local dev, don't set an external Traefik network in production
    external: false
